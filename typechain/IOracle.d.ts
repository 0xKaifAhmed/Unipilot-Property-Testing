/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOracleInterface extends ethers.utils.Interface {
  functions: {
    "assetToEth(address,address,uint256)": FunctionFragment;
    "ethToAsset(address,address,uint256)": FunctionFragment;
    "getPilotAmount(address,uint256,address)": FunctionFragment;
    "getPilotAmountForTokens(address,address,uint256,uint256,address,address)": FunctionFragment;
    "getPilotAmountWethPair(address,uint256,uint256,address)": FunctionFragment;
    "getPrice(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetToEth",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "ethToAsset",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getPilotAmount",
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "getPilotAmountForTokens",
    values: [string, string, BigNumberish, BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "getPilotAmountWethPair",
    values: [string, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, string, string, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: "assetToEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethToAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPilotAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPilotAmountForTokens",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPilotAmountWethPair",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;

  events: {
    "GovernanceUpdated(address,address)": EventFragment;
    "UniStrategyUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniStrategyUpdated"): EventFragment;
}

export type GovernanceUpdatedEvent = TypedEvent<
  [string, string] & { governance: string; _governance: string }
>;

export type UniStrategyUpdatedEvent = TypedEvent<
  [string, string] & { oldStrategy: string; newStrategy: string }
>;

export class IOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOracleInterface;

  functions: {
    assetToEth(
      token: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { ethAmountOut: BigNumber }>;

    ethToAsset(
      tokenOut: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      pool: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { pilotAmount: BigNumber }>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      oracle0: string,
      oracle1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { total: BigNumber }>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      altOracle: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getPrice(
      tokenA: string,
      tokenB: string,
      pool: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
  };

  assetToEth(
    token: string,
    pool: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  ethToAsset(
    tokenOut: string,
    pool: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPilotAmount(
    token: string,
    amount: BigNumberish,
    pool: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPilotAmountForTokens(
    token0: string,
    token1: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    oracle0: string,
    oracle1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPilotAmountWethPair(
    tokenAlt: string,
    altAmount: BigNumberish,
    wethAmount: BigNumberish,
    altOracle: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPrice(
    tokenA: string,
    tokenB: string,
    pool: string,
    _amountIn: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    assetToEth(
      token: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ethToAsset(
      tokenOut: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      pool: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      oracle0: string,
      oracle1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      altOracle: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPrice(
      tokenA: string,
      tokenB: string,
      pool: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    "GovernanceUpdated(address,address)"(
      governance?: null,
      _governance?: null,
    ): TypedEventFilter<
      [string, string],
      { governance: string; _governance: string }
    >;

    GovernanceUpdated(
      governance?: null,
      _governance?: null,
    ): TypedEventFilter<
      [string, string],
      { governance: string; _governance: string }
    >;

    "UniStrategyUpdated(address,address)"(
      oldStrategy?: null,
      newStrategy?: null,
    ): TypedEventFilter<
      [string, string],
      { oldStrategy: string; newStrategy: string }
    >;

    UniStrategyUpdated(
      oldStrategy?: null,
      newStrategy?: null,
    ): TypedEventFilter<
      [string, string],
      { oldStrategy: string; newStrategy: string }
    >;
  };

  estimateGas: {
    assetToEth(
      token: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ethToAsset(
      tokenOut: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      pool: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      oracle0: string,
      oracle1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      altOracle: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPrice(
      tokenA: string,
      tokenB: string,
      pool: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetToEth(
      token: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ethToAsset(
      tokenOut: string,
      pool: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      oracle0: string,
      oracle1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      altOracle: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPrice(
      tokenA: string,
      tokenB: string,
      pool: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
