/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UniStrategyInterface extends ethers.utils.Interface {
  functions: {
    "baseTicks()": FunctionFragment;
    "changeStrategy((int24,int24,int24,int24,uint32),address)": FunctionFragment;
    "getReadjustThreshold(address)": FunctionFragment;
    "getStrategy(address)": FunctionFragment;
    "getTicks(address)": FunctionFragment;
    "getTwap(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "rangeTicks()": FunctionFragment;
    "setAllStrategies(tuple[],address[])": FunctionFragment;
    "setBaseTicks(int24)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMaxTwapDeviation(int24)": FunctionFragment;
    "setPoolTwapDeviation(address[],int24[])": FunctionFragment;
    "setRangeTicks(int24)": FunctionFragment;
    "setReadjustMultiplier(int24)": FunctionFragment;
    "setTwapDuration(uint32)": FunctionFragment;
    "unipilot()": FunctionFragment;
    "updateUnipilotAddress(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseTicks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeStrategy",
    values: [
      {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      },
      string,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "getReadjustThreshold",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "getStrategy", values: [string]): string;
  encodeFunctionData(functionFragment: "getTicks", values: [string]): string;
  encodeFunctionData(functionFragment: "getTwap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rangeTicks",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setAllStrategies",
    values: [
      {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      }[],
      string[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTicks",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTwapDeviation",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolTwapDeviation",
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "setRangeTicks",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setReadjustMultiplier",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapDuration",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "unipilot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateUnipilotAddress",
    values: [string],
  ): string;

  decodeFunctionResult(functionFragment: "baseTicks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeStrategy",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReadjustThreshold",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getTicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rangeTicks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllStrategies",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTicks",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTwapDeviation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolTwapDeviation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRangeTicks",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReadjustMultiplier",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapDuration",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "unipilot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUnipilotAddress",
    data: BytesLike,
  ): Result;

  events: {
    "BaseTicksUpdated(int24,int24)": EventFragment;
    "GovernanceUpdated(address,address)": EventFragment;
    "MaxTwapDeviationUpdated(int24,int24)": EventFragment;
    "RangeTicksUpdated(int24,int24)": EventFragment;
    "ReadjustMultiplierUpdated(int24,int24)": EventFragment;
    "StrategyUpdated(tuple,tuple)": EventFragment;
    "TwapDurationUpdated(uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseTicksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTwapDeviationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RangeTicksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReadjustMultiplierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwapDurationUpdated"): EventFragment;
}

export type BaseTicksUpdatedEvent = TypedEvent<
  [number, number] & { oldBaseTicks: number; newBaseTicks: number }
>;

export type GovernanceUpdatedEvent = TypedEvent<
  [string, string] & { oldGovernance: string; newGovernance: string }
>;

export type MaxTwapDeviationUpdatedEvent = TypedEvent<
  [number, number] & { oldDeviation: number; newDeviation: number }
>;

export type RangeTicksUpdatedEvent = TypedEvent<
  [number, number] & { oldRangeTicks: number; newRangeTicks: number }
>;

export type ReadjustMultiplierUpdatedEvent = TypedEvent<
  [number, number] & { oldMultiplier: number; newMultiplier: number }
>;

export type StrategyUpdatedEvent = TypedEvent<
  [
    [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    },
    [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    },
  ] & {
    oldStrategy: [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    };
    newStrategy: [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    };
  }
>;

export type TwapDurationUpdatedEvent = TypedEvent<
  [number, number] & { oldDuration: number; newDuration: number }
>;

export class UniStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniStrategyInterface;

  functions: {
    baseTicks(overrides?: CallOverrides): Promise<[number]>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[number] & { readjustThreshold: number }>;

    getStrategy(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
      ] & {
        strategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
      }
    >;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getTwap(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[number] & { twap: number }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    rangeTicks(overrides?: CallOverrides): Promise<[number]>;

    setAllStrategies(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      }[],
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBaseTicks(
      _baseTicks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPoolTwapDeviation(
      _pools: string[],
      _twapDeviations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRangeTicks(
      _rangeTicks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setReadjustMultiplier(
      _readjustMultipier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unipilot(overrides?: CallOverrides): Promise<[string]>;

    updateUnipilotAddress(
      _unipilot: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  baseTicks(overrides?: CallOverrides): Promise<number>;

  changeStrategy(
    params: {
      baseThreshold: BigNumberish;
      rangeThreshold: BigNumberish;
      maxTwapDeviation: BigNumberish;
      readjustThreshold: BigNumberish;
      twapDuration: BigNumberish;
    },
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getReadjustThreshold(
    _pool: string,
    overrides?: CallOverrides,
  ): Promise<number>;

  getStrategy(
    _pool: string,
    overrides?: CallOverrides,
  ): Promise<
    [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    }
  >;

  getTicks(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getTwap(_pool: string, overrides?: CallOverrides): Promise<number>;

  governance(overrides?: CallOverrides): Promise<string>;

  rangeTicks(overrides?: CallOverrides): Promise<number>;

  setAllStrategies(
    params: {
      baseThreshold: BigNumberish;
      rangeThreshold: BigNumberish;
      maxTwapDeviation: BigNumberish;
      readjustThreshold: BigNumberish;
      twapDuration: BigNumberish;
    }[],
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBaseTicks(
    _baseTicks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxTwapDeviation(
    _twapDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPoolTwapDeviation(
    _pools: string[],
    _twapDeviations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRangeTicks(
    _rangeTicks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setReadjustMultiplier(
    _readjustMultipier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTwapDuration(
    _twapDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unipilot(overrides?: CallOverrides): Promise<string>;

  updateUnipilotAddress(
    _unipilot: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    baseTicks(overrides?: CallOverrides): Promise<number>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    getStrategy(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number] & {
        baseThreshold: number;
        rangeThreshold: number;
        maxTwapDeviation: number;
        readjustThreshold: number;
        twapDuration: number;
      }
    >;

    getTicks(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number, number] & {
        baseLower: number;
        baseUpper: number;
        bidLower: number;
        bidUpper: number;
        askLower: number;
        askUpper: number;
      }
    >;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<number>;

    governance(overrides?: CallOverrides): Promise<string>;

    rangeTicks(overrides?: CallOverrides): Promise<number>;

    setAllStrategies(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      }[],
      pools: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setBaseTicks(
      _baseTicks: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPoolTwapDeviation(
      _pools: string[],
      _twapDeviations: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setRangeTicks(
      _rangeTicks: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setReadjustMultiplier(
      _readjustMultipier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    unipilot(overrides?: CallOverrides): Promise<string>;

    updateUnipilotAddress(
      _unipilot: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "BaseTicksUpdated(int24,int24)"(
      oldBaseTicks?: null,
      newBaseTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldBaseTicks: number; newBaseTicks: number }
    >;

    BaseTicksUpdated(
      oldBaseTicks?: null,
      newBaseTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldBaseTicks: number; newBaseTicks: number }
    >;

    "GovernanceUpdated(address,address)"(
      oldGovernance?: null,
      newGovernance?: null,
    ): TypedEventFilter<
      [string, string],
      { oldGovernance: string; newGovernance: string }
    >;

    GovernanceUpdated(
      oldGovernance?: null,
      newGovernance?: null,
    ): TypedEventFilter<
      [string, string],
      { oldGovernance: string; newGovernance: string }
    >;

    "MaxTwapDeviationUpdated(int24,int24)"(
      oldDeviation?: null,
      newDeviation?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDeviation: number; newDeviation: number }
    >;

    MaxTwapDeviationUpdated(
      oldDeviation?: null,
      newDeviation?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDeviation: number; newDeviation: number }
    >;

    "RangeTicksUpdated(int24,int24)"(
      oldRangeTicks?: null,
      newRangeTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldRangeTicks: number; newRangeTicks: number }
    >;

    RangeTicksUpdated(
      oldRangeTicks?: null,
      newRangeTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldRangeTicks: number; newRangeTicks: number }
    >;

    "ReadjustMultiplierUpdated(int24,int24)"(
      oldMultiplier?: null,
      newMultiplier?: null,
    ): TypedEventFilter<
      [number, number],
      { oldMultiplier: number; newMultiplier: number }
    >;

    ReadjustMultiplierUpdated(
      oldMultiplier?: null,
      newMultiplier?: null,
    ): TypedEventFilter<
      [number, number],
      { oldMultiplier: number; newMultiplier: number }
    >;

    "StrategyUpdated(tuple,tuple)"(
      oldStrategy?: null,
      newStrategy?: null,
    ): TypedEventFilter<
      [
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
      ],
      {
        oldStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
        newStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
      }
    >;

    StrategyUpdated(
      oldStrategy?: null,
      newStrategy?: null,
    ): TypedEventFilter<
      [
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
      ],
      {
        oldStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
        newStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
      }
    >;

    "TwapDurationUpdated(uint32,uint32)"(
      oldDuration?: null,
      newDuration?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDuration: number; newDuration: number }
    >;

    TwapDurationUpdated(
      oldDuration?: null,
      newDuration?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDuration: number; newDuration: number }
    >;
  };

  estimateGas: {
    baseTicks(overrides?: CallOverrides): Promise<BigNumber>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getStrategy(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    rangeTicks(overrides?: CallOverrides): Promise<BigNumber>;

    setAllStrategies(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      }[],
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBaseTicks(
      _baseTicks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPoolTwapDeviation(
      _pools: string[],
      _twapDeviations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRangeTicks(
      _rangeTicks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setReadjustMultiplier(
      _readjustMultipier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unipilot(overrides?: CallOverrides): Promise<BigNumber>;

    updateUnipilotAddress(
      _unipilot: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseTicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getStrategy(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getTwap(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rangeTicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllStrategies(
      params: {
        baseThreshold: BigNumberish;
        rangeThreshold: BigNumberish;
        maxTwapDeviation: BigNumberish;
        readjustThreshold: BigNumberish;
        twapDuration: BigNumberish;
      }[],
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBaseTicks(
      _baseTicks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPoolTwapDeviation(
      _pools: string[],
      _twapDeviations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRangeTicks(
      _rangeTicks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setReadjustMultiplier(
      _readjustMultipier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unipilot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUnipilotAddress(
      _unipilot: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
