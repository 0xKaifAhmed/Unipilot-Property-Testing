/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IUniStrategyInterface extends ethers.utils.Interface {
  functions: {
    "getReadjustThreshold(address)": FunctionFragment;
    "getStrategy(address)": FunctionFragment;
    "getTicks(address)": FunctionFragment;
    "getTwap(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getReadjustThreshold",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "getStrategy", values: [string]): string;
  encodeFunctionData(functionFragment: "getTicks", values: [string]): string;
  encodeFunctionData(functionFragment: "getTwap", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getReadjustThreshold",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getTicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTwap", data: BytesLike): Result;

  events: {
    "BaseTicksUpdated(int24,int24)": EventFragment;
    "GovernanceUpdated(address,address)": EventFragment;
    "MaxTwapDeviationUpdated(int24,int24)": EventFragment;
    "RangeTicksUpdated(int24,int24)": EventFragment;
    "ReadjustMultiplierUpdated(int24,int24)": EventFragment;
    "StrategyUpdated(tuple,tuple)": EventFragment;
    "TwapDurationUpdated(uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseTicksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTwapDeviationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RangeTicksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReadjustMultiplierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwapDurationUpdated"): EventFragment;
}

export type BaseTicksUpdatedEvent = TypedEvent<
  [number, number] & { oldBaseTicks: number; newBaseTicks: number }
>;

export type GovernanceUpdatedEvent = TypedEvent<
  [string, string] & { oldGovernance: string; newGovernance: string }
>;

export type MaxTwapDeviationUpdatedEvent = TypedEvent<
  [number, number] & { oldDeviation: number; newDeviation: number }
>;

export type RangeTicksUpdatedEvent = TypedEvent<
  [number, number] & { oldRangeTicks: number; newRangeTicks: number }
>;

export type ReadjustMultiplierUpdatedEvent = TypedEvent<
  [number, number] & { oldMultiplier: number; newMultiplier: number }
>;

export type StrategyUpdatedEvent = TypedEvent<
  [
    [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    },
    [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    },
  ] & {
    oldStrategy: [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    };
    newStrategy: [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    };
  }
>;

export type TwapDurationUpdatedEvent = TypedEvent<
  [number, number] & { oldDuration: number; newDuration: number }
>;

export class IUniStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUniStrategyInterface;

  functions: {
    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[number] & { readjustThreshold: number }>;

    getStrategy(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
      ] & {
        strategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
      }
    >;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<[number]>;
  };

  getReadjustThreshold(
    _pool: string,
    overrides?: CallOverrides,
  ): Promise<number>;

  getStrategy(
    _pool: string,
    overrides?: CallOverrides,
  ): Promise<
    [number, number, number, number, number] & {
      baseThreshold: number;
      rangeThreshold: number;
      maxTwapDeviation: number;
      readjustThreshold: number;
      twapDuration: number;
    }
  >;

  getTicks(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getTwap(_pool: string, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<number>;

    getStrategy(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number] & {
        baseThreshold: number;
        rangeThreshold: number;
        maxTwapDeviation: number;
        readjustThreshold: number;
        twapDuration: number;
      }
    >;

    getTicks(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number, number] & {
        baseLower: number;
        baseUpper: number;
        bidLower: number;
        bidUpper: number;
        askLower: number;
        askUpper: number;
      }
    >;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "BaseTicksUpdated(int24,int24)"(
      oldBaseTicks?: null,
      newBaseTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldBaseTicks: number; newBaseTicks: number }
    >;

    BaseTicksUpdated(
      oldBaseTicks?: null,
      newBaseTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldBaseTicks: number; newBaseTicks: number }
    >;

    "GovernanceUpdated(address,address)"(
      oldGovernance?: null,
      newGovernance?: null,
    ): TypedEventFilter<
      [string, string],
      { oldGovernance: string; newGovernance: string }
    >;

    GovernanceUpdated(
      oldGovernance?: null,
      newGovernance?: null,
    ): TypedEventFilter<
      [string, string],
      { oldGovernance: string; newGovernance: string }
    >;

    "MaxTwapDeviationUpdated(int24,int24)"(
      oldDeviation?: null,
      newDeviation?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDeviation: number; newDeviation: number }
    >;

    MaxTwapDeviationUpdated(
      oldDeviation?: null,
      newDeviation?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDeviation: number; newDeviation: number }
    >;

    "RangeTicksUpdated(int24,int24)"(
      oldRangeTicks?: null,
      newRangeTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldRangeTicks: number; newRangeTicks: number }
    >;

    RangeTicksUpdated(
      oldRangeTicks?: null,
      newRangeTicks?: null,
    ): TypedEventFilter<
      [number, number],
      { oldRangeTicks: number; newRangeTicks: number }
    >;

    "ReadjustMultiplierUpdated(int24,int24)"(
      oldMultiplier?: null,
      newMultiplier?: null,
    ): TypedEventFilter<
      [number, number],
      { oldMultiplier: number; newMultiplier: number }
    >;

    ReadjustMultiplierUpdated(
      oldMultiplier?: null,
      newMultiplier?: null,
    ): TypedEventFilter<
      [number, number],
      { oldMultiplier: number; newMultiplier: number }
    >;

    "StrategyUpdated(tuple,tuple)"(
      oldStrategy?: null,
      newStrategy?: null,
    ): TypedEventFilter<
      [
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
      ],
      {
        oldStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
        newStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
      }
    >;

    StrategyUpdated(
      oldStrategy?: null,
      newStrategy?: null,
    ): TypedEventFilter<
      [
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
        [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        },
      ],
      {
        oldStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
        newStrategy: [number, number, number, number, number] & {
          baseThreshold: number;
          rangeThreshold: number;
          maxTwapDeviation: number;
          readjustThreshold: number;
          twapDuration: number;
        };
      }
    >;

    "TwapDurationUpdated(uint32,uint32)"(
      oldDuration?: null,
      newDuration?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDuration: number; newDuration: number }
    >;

    TwapDurationUpdated(
      oldDuration?: null,
      newDuration?: null,
    ): TypedEventFilter<
      [number, number],
      { oldDuration: number; newDuration: number }
    >;
  };

  estimateGas: {
    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getStrategy(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getReadjustThreshold(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getStrategy(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getTwap(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
